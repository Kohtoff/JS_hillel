"use strict";
/*_____________________ТИПЫ ДАННЫХ_____________________*/
//                                  number
//JS - динамически типизированный ЯП, что означает, что переменные не привязанны к типам данных
//ЧИСЛОВОЙ ТИП ДАННЫХ (number) - может представлять как целые числа, так и с плавующей точкой
//Существуют СПЕЦИАЛЬНЫЕ ЧИСЛОВЫЕ ВЫРАЖЕНИЯ Infinity, -Infinity и NaN.
// Infinity - математическая бесконечность. Мы можжем получитть её в результате деления на ноль или
// задать его явно 
// alert(1/0); результат: Infinity
//alert( Infinity ); результат: Infinity
//NaN - вычислительная ошибка
//alert("текст"/2); результат: NaN
//Любая операция с NaN возвращает NaN
//Мат операции безопасны и не вызывают фатальных ошибок из-за которых скрипт "умирает"
//                                  BigInt
//Так как в большенстве случаев на хватате number <=9007199254740991 или >= -9007199254740991
//BigInt встоечается довольно редко, но он полезен для метки времени ("timestamp"), 
// которая использует микросекунды
//Что бы создать занчение типа BigInt необходимо добавить n в конце числового литерала
// const BigInt=123123231214232352433241n;
//                                  string
//String строка всегда должна заключаться в кавычки 
// let str="rrrr";
// Существует 3 типа кавычек "Двойные кавычки", 'Одинарные', `обратные`
//Между двойными и одинариными разницы нету, но обратные кавычки имеют расширенный функционал
//Одинарные кавычки позволяют нам вставлять выражение. К примеру, 
//let name="Jon"
//alert(`Hi, ${name}!`); Результат: Hi, Jon!
//alert(`result: ${1+2}); Результат: result:3
//                                  boolean
//У булиана только два значения: true/false
//Булевые значения также могут быть результатом сравнений:
//let isGreater=4>1;
//alert(isGreater) Результат: true
//                                  null
//null говорит нам о том что значение перменной не известно 
//let age = null;
//                                  undefined
//Грубо говоря оно похоже на null. Только указывает на то что значение не было присвоенно 
//let age=;
//alert(age); результат: undefined
//Технически мы можем присвоить значение  null любой перменной
//let age = 12;
//age=undefined;
//alert(age); результат: undefined
// НО ТАК ДЕЛАТЬ НЕ РЕКОМЕНДУЕТСЯ!! Обычно null используется для присвоенния пустого или 
//неизвестного значения, а undefined - для проверок была ли переменная назначена
//                                  object и symbol
//Все остальные типы данных могут называться примитивными потому что их значения могут быть 
//только простыми. В обьектах же хранятся коллекции данных или более сложные структуры
//symbol используется для создания уникальных идентификаторов в обьектах
//                                  typeof
//Возращает тип аргумента. Полезно для обработки значение различных типов или проверки
// Есть две синтаксические формы 
// typeof x - синтаксис оператора
// typeof(x) - синтаксис функции 
// То есть он работает одинаково со скобками и без. Результат получится один и тот же
// Вызов typeof возвращает строку с именим типа
// typeof undefined;   результат: undefined
//typeof 0;   результат: number
//typeof 10n;   результат: BigInt
//typeof true;   результат: boolean
//typeof Symbol("id");    результат: symbol
//typeof "foo";    результат: string
//typeof Math;   результат: object
//Потому что, это встроенный обьект, который предоставляет мат операции и константы
//typeof alert;   результат: function 