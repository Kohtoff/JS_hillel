-- DOM-tree, browser-environment --

DOM - обьектная модель документа


'document' - это входная точка(что-то по типу main c++)

BOM - обьектная модель браузера

For example: 'navigator' , 'location', это все дополнительные обьекты,
которые включает в себя BOM
alert/confirm/prompt - методы окна браузера. 

DOM-nodes. 
Каждый тэг и текст(в том числе вне тэгов) - это обьекты

Автоисправление
Во время рендера у браузера срабатывает Автоисправление. Таким 
образом если разработчик пропустил, к примеру тэг <html> в начале документа, 
то браузер его автоматически подставит в DOM-nodes

Комментарии тоже входя в DOM. Существует правило:
Все что есть в хтмл должно быть в DOM и наоборот
!!!! Обьект document, которые представляет весь документ, тоже
формально является DOM узлом

Существует 12 типов узлов, но на практике мы работаем лишь с 4:
1 document - входная точка в DOM
2 узлы-элементы - ХТМЛ-тэги
3 текстовые узлы - содержат текст
4 Комментарии - иногда соддержат информацию, которая не будет отображена
но доступна в DOM и доступна для чтения JS


-- getElement, querySelector -- 
Существует глобальная переменная id. 
<div id = 'box'></div>

Но если обьявить переменную с таким же именем, свеже-созданная 
будет иметь больше приоритета


querySelectorAll:

возвращает коллекцию!! 

name.querySelectorAll(css) такой селектор возвращает все элементы, которые
удволитворяют данному css селектору

document.querySelectorAll('ul > li') Данный запрос возвращает все 
лист-айтемы, которые являються потомками ul

Также можно искать по псевжоклассам, к примеру:
querySelectorAll(':hover')


querySelector:
 
возвращает первый элемент, который соответсвует данному селектору
Он менее ресурсоёмкий нежели querySelectorAll

matches: 

elem.matches(css)
возвращает true/false

Проверяет удволитворяет ли elem css-селектору

Он достаточно полезный, когда мы перебираем эдементы


closest

elem.closest(css) - ищет ближайшего предка, который соответсвует
css-селектору. Сам элемент также учасвтуе в посике.

Возвращает либо null либо предка, если такой Существует


!!!!!!!!!!!!! Основной метод для посика элемента - querySelector !!!!!!!!!!!!!!!!

Живые коллекции: 
все методы getElementsBy... возвращают живые коллекции.
Такие коллекции всегда отражают текущее состояние документа и 
автоматически обновляються при его изминении

querySelector возвращает статическую коллекцию !!!! 